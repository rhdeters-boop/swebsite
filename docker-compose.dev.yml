version: '3.8'

services:
  # PostgreSQL Database (for user data, subscriptions, etc.)
  postgres:
    image: postgres:15-alpine
    container_name: swebsite-postgres
    environment:
      POSTGRES_DB: swebsite_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - swebsite-network

  # MinIO (S3-compatible storage for local development)
  # In production, this will be replaced with Azure Blob Storage
  minio:
    image: minio/minio:latest
    container_name: swebsite-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"  # API endpoint
      - "9001:9001"  # Web console
    volumes:
      - minio_data:/data
    networks:
      - swebsite-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Redis (for session storage and caching)
  redis:
    image: redis:7-alpine
    container_name: swebsite-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - swebsite-network

volumes:
  postgres_data:
  minio_data:
  redis_data:

networks:
  swebsite-network:
    driver: bridge

# For production with Azure Blob Storage, add these environment variables to your backend:
# STORAGE_PROVIDER=azure
# AZURE_STORAGE_ACCOUNT_NAME=your_storage_account_name
# AZURE_STORAGE_ACCOUNT_KEY=your_storage_account_key
# AZURE_CONTAINER_NAME=void-media
#
# PostgreSQL will remain the same for user data, while media files will be stored in Azure Blob Storage